{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidvega/code/webstarter/client/store/users/AuthContext.jsx\";\nimport React, { useContext, useState, useEffect, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { ini } from '../../authentication/firebase';\nimport { postURL } from '../../api/PostURL';\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  return useContext(AuthContext);\n} // https://www.youtube.com/watch?v=qWy9ylc3f9U\n\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: token,\n    1: setToken\n  } = useState('');\n  const auth = app.auth(); // this a global API with auth token baked in - this way we can track the user\n  // this is going to add a user to firebase auth as well as use the credential or uid created by firebase auth to\n  // add the user to firestore. The postURL function acts as a form of frontend middleware (maybe?) between the\n  // frontend and backend.\n\n  async function signup(uname, uemail, password) {\n    return auth.createUserWithEmailAndPassword(uemail, password).then(cred => postURL('/api/users', {\n      uid: cred.user.uid,\n      username: uname,\n      email: uemail\n    }));\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  async function loginWithGoogle() {\n    return auth.signInWithPopup(googleProvider).then(cred => {\n      postURL('/api/users', {\n        uid: cred.user.uid,\n        username: cred.user.displayName,\n        email: cred.user.email,\n        picture: cred.user.photoURL\n      });\n    });\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  }\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  }\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  }\n\n  useEffect(() => {\n    auth.onAuthStateChanged(async user => {\n      if (user) {\n        const newToken = await user.getIdToken();\n        setToken(newToken);\n      } else {\n        setToken('');\n      }\n\n      setCurrentUser(user);\n      setLoading(false);\n    });\n  }, []);\n  const value = {\n    currentUser,\n    login,\n    loginWithGoogle,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n    token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n}\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/Users/davidvega/code/webstarter/client/store/users/AuthContext.jsx"],"names":["React","useContext","useState","useEffect","createContext","PropTypes","ini","postURL","AuthContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","token","setToken","auth","app","signup","uname","uemail","password","createUserWithEmailAndPassword","then","cred","uid","user","username","email","login","signInWithEmailAndPassword","loginWithGoogle","signInWithPopup","googleProvider","displayName","picture","photoURL","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","onAuthStateChanged","newToken","getIdToken","value","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {ini} from '../../authentication/firebase';\nimport { postURL } from '../../api/PostURL';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// https://www.youtube.com/watch?v=qWy9ylc3f9U\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState('');\n  const auth = app.auth();\n\n  // this a global API with auth token baked in - this way we can track the user\n  // this is going to add a user to firebase auth as well as use the credential or uid created by firebase auth to\n  // add the user to firestore. The postURL function acts as a form of frontend middleware (maybe?) between the\n  // frontend and backend.\n  async function signup(uname, uemail, password) {\n    return auth.createUserWithEmailAndPassword(uemail, password).then((cred) =>\n      postURL('/api/users', {\n        uid: cred.user.uid,\n        username: uname,\n        email: uemail,\n      }),\n    );\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  async function loginWithGoogle() {\n    return auth.signInWithPopup(googleProvider).then((cred) => {\n      postURL('/api/users', {\n        uid: cred.user.uid,\n        username: cred.user.displayName,\n        email: cred.user.email,\n        picture: cred.user.photoURL,\n      });\n    });\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  }\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  }\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  }\n\n  useEffect(() => {\n    auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        const newToken = await user.getIdToken();\n        setToken(newToken);\n      } else {\n        setToken('');\n      }\n      setCurrentUser(user);\n      setLoading(false);\n    });\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    loginWithGoogle,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n    token,\n  };\n\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n}\n\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}